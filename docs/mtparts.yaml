openapi: 3.0.1
info:
  title: 'Web, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  version: '1.0'
paths:
  /api/settings/ifirma:
    get:
      tags:
        - settings/ifirma
      operationId: GetIFirmaSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IFirmaSettingDto'
    post:
      tags:
        - settings/ifirma
      operationId: CreateIFirmaSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIFirmaSettingCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
  '/api/settings/ifirma/{id}':
    get:
      tags:
        - settings/ifirma
      operationId: GetIFirmaSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IFirmaSettingDto'
    delete:
      tags:
        - settings/ifirma
      operationId: DeleteIFirmaSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/settings/mongodb:
    get:
      tags:
        - settings/mongodb
      operationId: GetMongoDBSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MongoDBSettingDto'
    post:
      tags:
        - settings/mongodb
      operationId: CreateMongoDBSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMongoDBSettingCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
  '/api/settings/mongodb/{id}':
    get:
      tags:
        - settings/mongodb
      operationId: GetMongoDBSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MongoDBSettingDto'
    delete:
      tags:
        - settings/mongodb
      operationId: DeleteMongoDBSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/settings/polcar:
    get:
      tags:
        - settings/polcar
      operationId: GetPolcarSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PolcarSettingDto'
    post:
      tags:
        - settings/polcar
      operationId: CreatePolcarSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolcarSettingCommand'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
  '/api/settings/polcar/{id}':
    get:
      tags:
        - settings/polcar
      operationId: GetPolcarSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolcarSettingDto'
    delete:
      tags:
        - settings/polcar
      operationId: DeletePolcarSetting
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
components:
  schemas:
    CreateIFirmaSettingCommand:
      required:
        - email
        - fakturaApiKey
      type: object
      properties:
        email:
          minLength: 1
          type: string
        fakturaApiKey:
          minLength: 1
          type: string
      additionalProperties: false
    CreateMongoDBSettingCommand:
      required:
        - collectionName
        - connectionURI
        - databaseName
      type: object
      properties:
        connectionURI:
          minLength: 1
          type: string
        databaseName:
          minLength: 1
          type: string
        collectionName:
          minLength: 1
          type: string
      additionalProperties: false
    CreatePolcarSettingCommand:
      required:
        - branchId
        - distributorCode
        - languageId
        - login
        - password
      type: object
      properties:
        login:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        distributorCode:
          minLength: 1
          type: string
        branchId:
          type: integer
          format: int32
        languageId:
          type: integer
          format: int32
      additionalProperties: false
    IFirmaSettingDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          nullable: true
        fakturaApiKey:
          type: string
          nullable: true
      additionalProperties: false
    MongoDBSettingDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        connectionURI:
          type: string
          nullable: true
        databaseName:
          type: string
          nullable: true
        collectionName:
          type: string
          nullable: true
      additionalProperties: false
    PolcarSettingDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        distributorCode:
          type: string
          nullable: true
        branchId:
          type: integer
          format: int32
        languageId:
          type: integer
          format: int32
      additionalProperties: false